<?xml version="1.0" encoding="UTF-8"?>
<!-- /src/main/java/aop.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd">
<bean id="write" class="spring.WriteImpl">
	<constructor-arg><ref bean="articleDao" /></constructor-arg>
</bean>
<bean id="read" class="spring.ReadImpl">
	<constructor-arg><ref bean="articleDao" /></constructor-arg>
</bean>
<bean id="articleDao" class="spring.MariadbArticleDao" />
<bean id="logging" class="spring.LoggingAspect" />
<!-- 
	aop 설정.
-->
<aop:config>
	<!-- pointcut : 원래 실행되어야 할 메서드(write() 메서드)
		 spring.*Impl : spring 패키지의 클래스 중 클래스 이름이 Impl로 끝나는 클래스.
		 *(..) : 모든 메서드, 매개변수 상관없음
		 ==============================
		 spring 패키지의 클래스 중 이름이 Impl로 끝나는 클래스 내부의 모든 public 메서드를 지정
	-->
	<aop:pointcut expression="execution(public * spring.*Impl.*(..))" id="servicepointcut"/>
	<!-- aspect : aop 클래스 지정-->
	<aop:aspect id="loggingAspect" ref="logging">
	<!-- around : advice의 한 종류, 기본메서드 실행 전, 후 모두 실행.
		 advice : aop가 실행되는 시점을 설정-->
		<aop:around method="logging" pointcut-ref="servicepointcut" />
	</aop:aspect>
</aop:config>
<!-- 
	aop 관련 용어
	pointcut : aop 대상이 되는 메서드 설정. => 기본 메서드
	aspect : aop로 사용되는 클래스의 객체 지정
	advice : pointcut 메서드실행 시점 지정
		- around : pointcut 메서드실행 전, 후로 지정
		- before : pointcut 메서드실행 전으로 지정
		- after : pointcut 메서드실행 후로 지정
		- afterReturning : pointcut 메서드 실행 후 정상종료 되었을 때로 지정
		- afterThrowing : pointcut 메서드 실행 후 예외종료 후로 지정
-->
</beans>